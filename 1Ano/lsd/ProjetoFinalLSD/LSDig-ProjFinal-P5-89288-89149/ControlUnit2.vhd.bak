library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity ControlUnit2 is
		port(	clk		:	in		std_logic;
				enable	:	in		std_logic;
				reset		:	in		std_logic; -- METER DEBOUNCER
				code1		:	in		std_logic;
				code2		:	in		std_logic;
				C2			:	out	std_logic;
				C1			:	out	std_logic;
				T2			:	out	std_logic;
				T1			:	out	std_logic;
				T0			:	out	std_logic);
				
end ControlUnit2;

architecture Behavioral of ControlUnit2 is

	type state is (OFF,InputCode1, InputCode2, CodeOK, CodeNotOk);
	signal s_currentState, s_nextState	:	state;
	
begin

	change_proc : process(clk, reset)
	
	begin
				if (reset='1') then
					s_currentState <= InputCode1;
				elsif(rising_edge(clk)) then
					s_currentState <= s_nextState;
				end if;
	end process;
	
	
	def_proc	   : process(enable, code1, code2)
	
	begin
			case (s_currentState) is
			
				
				when OFF =>
					T2<='1';
					T1<='0';
					T0<='0';
					
					if(enable='1' and reset='0') then
						s_nextState <= InputCode2;
					elsif(enable='1' and reset='1') then
						s_nextState <= InputCode1;
					else
						s_nextState <= s_currentState;
				
				
				when InputCode1 =>
					T2<='1';
					T1<='0';
					T0<='0';
					
					if(enable='1' and code1='1' and code2='0') then
						s_nextState <= CodeOK;
					elsif(enable='1' and code2='1') then
						s_nextState <= CodeNotOk;
					elsif(enable='0') then
						s_nextState <= OFF;
					else
						s_nextState <= s_currentState;
					end if;
					
					
				
				when InputCode2 =>
					T2<='1';
					T1<='1';
					T0<='0';
					
					if(enable='1' and code2='0') then
						s_nextState <= CodeNotOk;
					elsif(enable='1' and code2='1') then
						s_nextState <= CodeOk;
					elsif(enable='0') then
						s_nextState <= OFF;
					else
						s_nextState<= s_currentStateM
					end if;
					
					
				when CodeOk;
					T2<='1';
					T1<='0';
					T0<='0';
					
					if(enable='1' and reset='1') then
						s_nextState <= InputCode1;
					elsif(enable='1' and reset='0') then
						s_nextState <= InputCode2;
					elsif(enable='0') then
						s_nextState <= OFF;
					else
						s_nextState<= s_currentState;
					end if;
						
				
				when CodeNotOk;
					T2<='1';
					T1<='1';
					T0<='1';
					
					if(enable='1' and reset='0') then
						s_nextState <= InputCode2;
					elsif(enable='0') then
						s_nextState <= OFF;
					else
						s_nextState <= s_currentState;
					end if;
					
			end case;

	end process;					
						
end Behavioral;	
						